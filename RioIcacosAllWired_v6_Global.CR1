'CR1000 Series Datalogger
' Copyright 2014, 2017 Micro Specialties, Inc. Wasilla, Alaska
' Richard M. Brown
' Micro Specialties, Inc.
' Wasilla, Alaska
' www.Micro-Specilaties.com
' 907-373-7424
'
'Terms of Use:
'Micro Specialties, Inc. (MSI) provides software products for use only with MSI products such as Global Modem free of charge to MSI clients.
'The recipient of said software products may not sell, loan, copy or otherwise distribute MSI software products in whole or in part, to other
'individuals or entities without the expressed, written permission of Micro Specialties, Inc.
'Acceptance or use of MSI software products implies consent to these terms of use.
'This paragraph must be included in any client software based in whole or in part on any MSI software product.
'
' Program Specifics:
' Send a Global Modem report at the top of the hour, or if C8 increments
' The report is built from the table "hourly", which contains some battery voltage and panel temperature values.
'
' The Slow Scan operates the Global Modem dialog at lower priority than the data collection scan, so scans are never skipped.
' An "outer loop" is present in the slow scan, which will call sendvalues repeatedly until message delievry is confirmed.  This loop can
' run up to 10 times, or until sendvalues() sets the msgDelivered flag to 1.
'
' Important Global Modem Variables:
' SendReport    - flag set at report interval to start the report process.  SendReport is set if:
'                 - c8 > 0.    (touching c8 to 5V will cause c8 to increment, which set SendReport immediately
'                 - iftime(0,60,min) (aoutmatic report at the top of each hour
' sendLoop      - "outer loop" counter (allows the send function to loop up to 10 times to deliver a data message
' tries         - "inner loop" counter (tries up to 5 times to deliver a data message before power-cycling the modem)
' commState     - Text indicator: indicates status of the current report:
'                 - "Attention":     Modem is awake and responsive
'                 - "Net Ready":     Modem is accessing the network
'                 - "Msg Delivered": The Report has been delivered across the network
'                 - "Msg Failed":    Report delivery has failed. Report has not been delivered.
' RptsAttempted - number of reports attempted
' RptsFailed    - number of reports not delivered (failed)
' values2send   - number of values to send via Global Modem
' values        - pass this array of floats to the Modem
'
' Global Modem connects to the CSIO port:
' CSIO Pin    GlobalModem    Function
' 5           white          Activate (wake up)
' 9           red            Serial Data CR1000 TX
' 4           green          Serial Data CR1000 RX
' 2           black          Common

' Global Modem Power
' Modem Wire    Logger Wire Point
' 12V (Red)     12V               12V + 1.6A Peak
' G   (Blk)       G
'

' Program Specifics:
' Send a Global Modem report at the top of the hour, or if C8 increments
' The report is built from the table "Wqual" (17 values, NOW 18 WITH AqCO2).
'
' The Slow Scan operates the Global Modem dialog at lower priority than the data collection scan, so scans are never skipped.
' An "outer loop" is present in the slow scan, which will call sendvalues repeatedly until message delievry is confirmed.  This loop can
' run up to 10 times, or until sendvalues() sets the msgDelivered flag to 1.
'
' Important Global Modem Variables:
' SendReport    - flag set at report interval to start the report process.  SendReport is set if:
'                 - c8 > 0.    (touching c8 to 5V will cause c8 to increment, which set SendReport immediately
'                 - iftime(0,60,min) (aoutmatic report at the top of each hour
' sendLoop      - "outer loop" counter (allows the send function to loop up to 10 times to deliver a data message
' tries         - "inner loop" counter (tries up to 5 times to deliver a data message before power-cycling the modem)
' commState     - Text indicator: indicates status of the current report:
'                 - "Attention":     Modem is awake and responsive
'                 - "Net Ready":     Modem is accessing the network
'                 - "Msg Delivered": The Report has been delivered across the network
'                 - "Msg Failed":    Report delivery has failed. Report has not been delivered.
' RptAttempted   - number of reports attempted
' RptFailures    - number of reports not delivered (failed)
' values2send    - number of values to send via Global Modem
' values         - pass this array of floats to the Modem
'
' Global Modem connects to CR1000 Wiring Panel Special Wiring for Riolcacos:
' CR1000    GlobalModem    Function
' C4        C4             Activate (wake up)
' C5        C5             Serial Data CR1000 TX
' C6        C6             Serial Data CR1000 RX
' G         G              Common
' 12V       12V+           12V + 1.6A Peak
' G         12V-
'
' Define the width of the values array
Const valueArrayLen = 18  'width of Wqual table
' Define width of the data table
Const tableWidth =  valueArrayLen
'CR1000 Port settings for GlobalModem:
'  Normally use com3 for communications with Global Modem when connecting to the wiring panel (C4,C5,C6)
'  If using the CSIO port instead, set iPort to comME
Const iPort = comME  ' use com1 for data interface to Global Modem
Const iEnable = 0   ' use this control port to enable power up the GlobalModem

Dim counter, i
'**** Special defs for globalModem  ****
Public c8                     'c8 input means user wants to send a message
Public ts As Long
Public SendReport As Long
Public sendLoop As Long       'counter: Number of times the sendMsg  process failed to send data
Public tries As Long         'number of times we've tried to deleiver the message
Public reportBuilt As Boolean 'Flag indicating time to build a telemetry report
'Public msgSent As Long   'flag: 1 means message has been delivered
'Public rptAttempts As Long    ' Count number of reports attempetd
'Public rptFailures as Long    ' Count  nuber of report failures
Public dataDate As Long     ' the date in minutes of the year for the data
Public values2send As Long  ' number of sensors to send to Global Modem
Public TableData(TableWidth)
Public values(valueArrayLen)  ' array of values to send.
'Public commState As String * 20
Public ScanState As String * 20
Include "CPU:GlobalModemInclude.cr1"
' end globalModem special defs




StationName RioIcacos
' Original code for Goffs Falls written by Gopal Muluktula, May 2013
' September 3rd 2014 - Lisle Snyder added code to incorporate SUNA V2 1550 msec scan rate and enable cf card
' Cell modem to turn at 12.00 and off at 14.00
' Added code to read time variables at the start of each measurement.
' August 2015 - Gopal M. made improvements to how the SUNA V2 is read (with SUNAShortRaw file).
' May 31 2016 - Lisle Snyder merged code provided by Eric Moore to switch YSI EXO2 with Eureka, and add Vaisala to SE1 for Rio Icacos PR site
' April 14 2017 - Eric Moore merged this code to accomodate wired sensor set up: Conductivity, pH, CO2, Turbidity, and fDOM
' March 2018 - Lisle Snyder added lines to include an Aquatic CO2 meter with analog output, Removed Eureka code lines to save space
' April 16 2018 - Carla Lï¿½pez Lloreda fixed mistake between Ct and Cond (were switched around)
' December 2019 - Kyle Zollo:
'   -commented out pH sensor lines
'   -Removed pH and SEVolt from table
'		-fixed mistake variable used in Ct calculation
'   -renamed as v5


'SequentialMode 'Configures data logger to perform tasks sequentially
'Program variables
'Variable list
'Diagnostic

Public PTemp, batt_volt, ComStatus As Boolean,RavenPortOn' measurement variables
Const meas_freq = 15 ' minutes, measurement frequency
Const suna_scans=22 '  number of scans at meas_freq
Const buf_scan=(suna_scans-5) ' buffer scans
Const suna_delay = 35 ' seconds
Const MinBatteryVoltage = 11.2 ' battery voltage at which to stop the SUNA
Public rTime(9),FullTime 'declare as public and dimension rTime to 9
Const NDays= 180 ' no of days of data stored in card.
Const Ndata = NDays*(60/meas_freq)*24*suna_scans ' for long frames
Const SData=((60/meas_freq)*24*NDays)*10' multiply the number by 10 .

'Vaisala CO2 Sensor
'Public SEVolt
'Units SEVolt=mV

'SUNA
Public RawString As String *2000, NBytesReturned As String * 16
'Declare Other Variables
Public SUNA_parse(10)
'Assign aliases to the public array
Alias SUNA_parse(2)=DayofYear2
Alias SUNA_parse(3)=TimeofDayUTC2
Alias SUNA_parse(4)=Nitrate_um2
Alias SUNA_parse(5)=Nitrate_mgL2
Alias SUNA_parse(6)=Absorbance_2542
Alias SUNA_parse(7)=Absorbance_3502
Alias SUNA_parse(8)=Bromide2
Alias SUNA_parse(9)=LightAverage2
Alias SUNA_parse(10)=DarkAverage2

' YSI EXO
	Const SDI12Vals = 13 'max number SDI12 values to be returned
    Const SDI12Freq = 17 'minutes
    Public SDI12Read As Boolean
    Dim LCount
		Public YSI(SDI12Vals) 'array to hold SDI12 values returned
		' time variable
		Dim e
               
       Alias YSI(1)=CablePwrV
       Alias YSI(2)=TempC 
       Alias YSI(3)=Conductivity 
       Alias YSI(4)=SpConductivity
	   Alias YSI(5)=pH
	   Alias YSI(6)=pH_mv
       Alias YSI(7)=DepthMeter 
       Alias YSI(8)=ODOPerCent 
       Alias YSI(9)=ODOMGL 
       Alias YSI(10)=TurbidityFNU
       Alias YSI(11)=TurbidityNTU 
       Alias YSI(12)=FDOMRFU
       Alias YSI(13)=FDOMQSU 

Alias rTime(1) = Year          'assign the alias Year to rTime(1)
Alias rTime(2) = Month         'assign the alias Month to rTime(2)
Alias rTime(3) = DOM           'assign the alias Day to rTime(3)
Alias rTime(4) = Hour          'assign the alias Hour to rTime(4)
Alias rTime(5) = Minute        'assign the alias Minute to rTime(5)
Alias rTime(6) = Second        'assign the alias Second to rTime(6)
Alias rTime(9) = Day_of_Year   'assign the alias Day_of_Year to rTime(9)

' New Variables to read the SUNA V2 correctly
Public  NO3Vals(20), AvgNO3, M, K, L, SUMNO3, temp
Alias K = ValidMeas
Public NO3Vals2(20), Abs254vals(20),Abs350vals(20),Brvals(20),Lvals(20)
Public SumNO32,SumAbs254,SumAbs350,SumBr,SumL
Public Nitrate_mgL,Nitrate_um,Absorbance_254,Absorbance_350,Bromide,LightAverage

'Public pHCount
'Public pH
Public Cond,Ct,Temp2
Public Turb
Public TurbNTU
Public fDOM
'Dim RawString2 As String * 20, pHDigit(2)
Dim Rs
Public Gain

'Units pHCount=pH
Units Cond=mS/cm
Units Ct=mS/cm
Units Temp2=Deg C
Units Turb=mV
Units fDOM=mV

' Aquatic CO2 variables 
			Public AqCO2_mv(20), AqCO2_ppm(20), temp3, SUMCo2,AqCO2_ppm_avg  
			Dim N, J

'|||||||||||||||||PROGRAM CONSTANTS||||||||||||||||||||||||||||||||||||||||||||||||||

Const RavenPort = 7
Public WiperFlagOn As Boolean
Public ModemFlagOn As Boolean
Public BattVolt ' measure the voltage being received

'Const pHMult=0.01886792
'Const pHOffs=-2.358491

'Data Tables
DataTable (SUNARaw,1,-1) '-1 for auto-allocate memory.
  CardOut (1,Ndata)'
  Sample (1,RawString(),String)
EndTable

DataTable (WQual,1,-1)
  CardOut (0,SData)' enough for 180 days of data.
  Sample (1,PTemp,FP2)
  Minimum (1,batt_volt,FP2,0,False)
  Sample (1,Nitrate_um,IEEE4)
  Sample (1,Nitrate_mgL,IEEE4)
  'Sample (1,SEVolt,FP2)
  Sample (1,Absorbance_254,IEEE4)
  Sample (1,Absorbance_350,IEEE4)
  Sample (1,Bromide,IEEE4)
  Sample (1,LightAverage,IEEE4)
  Sample(SDI12Vals,YSI(),IEEE4)
  'Sample (1,pHCount,IEEE4)
  'Sample (1,pH,IEEE4)
  Sample (1,Cond,FP2)
  Sample (1,Ct,FP2)
  Sample (1,Temp2,FP2)
  Sample (1,Turb,IEEE4)
  Sample (1,fDOM,IEEE4)
  Sample (1,Gain, IEEE4)
  Sample (1,AqCO2_ppm_avg, IEEE4)
EndTable

DataTable (SUNAShortRaw,1,-1) '-1 for auto-allocate memory.
  ' This table stores only the parsed strings of data. A short table, not for use beyond the code.
  ' entries stored in ring mode
  CardOut (0,2000)'
  Sample (1, FullTime, IEEE4 )
  Sample (1,Nitrate_um2,IEEE4)
  Sample (1,Nitrate_mgL2,IEEE4)
  Sample (1,Absorbance_2542,IEEE4)
  Sample (1,Absorbance_3502,IEEE4)
  Sample (1,Bromide2,IEEE4)
  Sample (1,LightAverage2,IEEE4)
EndTable

' Aq CO2 tables
			DataTable (AqCO2Full,1,-1)
			CardOut (0,100000)
			Sample(20,AqCO2_mv(),IEEE4)  
			Sample(20,AqCO2_ppm(),IEEE4)  
			EndTable 
			DataTable (AqCO2Short,1,-1)
			CardOut (0,10000)
      		Sample(1,AqCO2_ppm_avg, IEEE4)
			EndTable 


'||||||||||||||||||||||||||||||||||| SUBROUTINES||||||||||||||||||||||||||||||||||||
Sub nitrateMeasurements
  ' SUNa is Full ASCII mode,
  ' create an active com2 port.
  ' VERY IMPORTANT: SUNA likes it when the port is active and then the power is switched on. so create active com  port first, and then turn the power on .
  'SUNA may not talk to the data logger if the steps are reversed.
  SerialOpen (Com2,38400,0,0,25000)'open com port w/ correct port settings AND enough Data
  ' get panel temp. and battery voltage for transmitting with data record.
  PanelTemp (PTemp,250)
  Battery (batt_volt)
  SW12(1) ' switch on power to SUNA
  Delay(0,suna_delay,Sec) '
  Scan(1550, mSec, 2,suna_scans )
    SerialInRecord (Com2,RawString,83,0,&H0D0A,NBytesReturned,00) ' read each scan with a start of text character
    SplitStr (SUNA_parse(),RawString,0,10,0)
    '			AvgRun (SUNA(),10,SUNA_parse(),suna_scans-1)
    '     	            &H53&H41 "SA in SAT.... instrument code."
    CallTable SUNARaw '
    CallTable SUNAShortRaw
  NextScan
  SW12(0)'shut down SUNA
  SerialClose (Com2) '
EndSub

''''''''''''''''''''''''''
Sub YSIMeasurements
			 Scan( 65, Sec, 1,1 )   ' scan for roughly 1 minute to allow the ysi to send the data.
				  Move (YSI(),SDI12Vals,NAN,1)
				 '    SW12(1) ' switch on power to YSI 
               	   	Delay(0,5,Sec) 
        	 LCount=1      	   	
			For e = 1 To SDI12Vals 'Try up to 14 times for valid readings
						SDI12Recorder (YSI(LCount),7,0,"C!",1.0,0)	' EXO2 connected to CR1000 port C7 (arg2)
																	' and SDI12 address 0 (arg3)
			If YSI(LCount)<>NAN Then ExitFor
			Next e
			LCount=LCount+1
			

		
			  NextScan
		 EndSub
		 
		 ''''''''''''''''''''''''''''''
Sub Aq_CO2Measurements
			  ' read 20 measurements of CO2 
          For J=1 To 20
					VoltSe(AqCO2_mv(J), 1, mV2500, 3, False, 0, 250, 1, 0)

					' calculate CO2 in ppm ' NOTE: use the appropriate regression parameters determined through Calibration!!
					' convert the voltage from milli volts to Volts and then apply the regression equation for CO2 meter 03123BEB
					 AqCO2_ppm(J) = (AqCO2_mv(J)/1000 - 1.035) / 0.00195
 					Delay(0,100,mSec) 
					Next J
							
					' perform a basic QA/QC to remove  outliers
					 For J=1 To 20
					   N=0
					   SUMCo2=0
					 temp3=AqCO2_ppm(J)
					 ' The range of 100 to 2000 ppm is considered valid
					 If ( temp3 <2000 AND temp3 > 100)
					SUMCo2=SUMCo2+temp3
					N=N+1
					 EndIf 
					Next J
					' if for some reason there are no valid CO2 values
					If ( N=0)
           AqCO2_ppm_avg = NaN
           Else
             ' get average of the valid CO2 values
           AqCO2_ppm_avg = SUMCo2/N 
					EndIf
					
			   
			EndSub 

'||| |||||||||||||||||||||||||||||||PROGRAM||||||||||||||||||||||||||||||||||||
BeginProg
  Scan (1,min,0,0)
    ScanState = "Main"
    'Trigger Global Modem report 2 minutes into reporting interval
    If SendReport < 1 Then
      If TimeIntoInterval(2,60,min) Then
        SendReport = 1
        reportBuilt = False
      EndIf
    EndIf
    If TimeIntoInterval(12,24,Hr) Then
      RavenPortOn = 1
    EndIf
    If TimeIntoInterval(14,24,Hr) Then
      RavenPortOn = 0
    EndIf
    PortSet (RavenPort, RavenPortOn)  'When PortOn = 1, port will be set high
    If TimeIntoInterval (0,meas_freq,Min) Then ' to set the SUNA to start every 15 minutes, top and bottom of the hour
      RealTime( rTime )
      FullTime=Day_of_Year +(Hour/24)+(Minute/60)/60

      nitrateMeasurements   	' make nitrate measurement
      Battery(batt_volt)
	  Aq_CO2Measurements

'make YSI measurements
SDI12Read = TRUE
					YSIMeasurements

      'Vaisala CO2 Sensor Generic Single-Ended Voltage measurements 'SEVolt' (wired to SE 1)
      'VoltSe(SEVolt,1,mV5000,4,True,0,_60Hz,1,0)

      'CS526 ISFET pH Probe measurement 'pH'
      'SerialOpen(Com3,2400,16,0,41)
      'SerialOut(Com3,"1M1!"&CHR(13),"",0,0)
      'SerialIn(RawString2,Com3,50,0,20)
      'Parse out 'pHAdd' and 'pHCount' from 'CS526String'
      'SplitStr(pHDigit(),RawString2,"String",2,0)
      'pHCount = pHDigit(2)
      'pH=pHCount*pHMult+pHOffs

      'CS547A Conductivity and Temperature Probe measurements 'SpC', 'Ct', and 'Temp'
      'Make preliminary voltage measurement
      BrFull(Rs,1,mV2500,4,1,1,2500,True,True,0,_60Hz,-0.001,1)
      'Convert voltage measurement to resistance
      Rs=Rs/(1-Rs)
      'Make refined voltage measurement based on preliminary measurement
      Select Case Rs
      Case Is <1.8
        BrHalf(Rs,1,mV2500,8,1,1,2500,True,0,_60Hz,1,0)
      Case Is <9.25
        BrFull(Rs,1,mV2500,4,1,1,2500,True,True,0,_60Hz,-0.001,1)
      Case Is <280
        BrFull(Rs,1,mV250,4,1,1,2500,True,True,0,_60Hz,-0.001,1)
      EndSelect
      'Convert voltage measurement to resistance
      Rs=Rs/(1-Rs)
      'Subtract resistance errors
      Rs=Rs-(75*0.000032+0.005)
      'Calculate EC
      Cond=(1/Rs)*1.452
      'Correct EC for ionization errors
      If Cond<0.474 Then
        Cond=Cond*0.95031-0.00378
      Else
        Cond=-0.02889+(0.98614*Cond)+(0.02846*Cond^2)
      EndIf
      'Make temperature measurement (Deg C)
      Therm107(Temp2,1,5,2,0,250,1,0)
      'Correct EC for temperature errors
      Ct=(Cond*100)/((Temp2-25)*2+100)
      'Trap measurements below 0.005 mS/cm threshold
      If Ct<0.005 Then
        Ct=0.005
      EndIf


      PortSet(1,1)
      Gain = 1
      'Measure cdom with Cyclops-7
      Delay(1,1,sec)
      VoltDiff(fDOM,1,AutoRange,7,False,0,_60Hz,1,0)
      If fDOM>4600 Then
        WriteIO (&B10,&B10)
        Gain = 1
      ElseIf fDOM<=440
        WriteIO (&B10,&B00)
        Gain = 10
      EndIf

      'Measure Turbidity with Cyclops-7
      PortSet(2,1)

      Delay(1,1,sec)
      ' VoltSe(cDOM,1,AutoRange,14,False,0,_60Hz,1,0)
      VoltDiff(Turb,1,AutoRange,8,False,0,_60Hz,1,0)
      If Turb>4600 Then
        WriteIO (&B10,&B10)
        Gain = 1
      ElseIf Turb<=440
        WriteIO (&B10,&B00)
        Gain = 10
      EndIf
      ' TurbNTU =((Turb/Gain)*600)
      'Turb = ((.8225*Turb)+30.82)

      'Hold on to the data

      ' Go back to the SUNA Data stored in the shorter Raw table
      ' accessthe data table and get the previous 20 values
      ' read all the SUNA NO3 values to a temporary variable.
      For L=1 To 20
        NO3Vals(L)=SUNAShortRaw.Nitrate_mgL2(1,L)
        NO3Vals2(L)=SUNAShortRaw.Nitrate_um2(1,L)
        Abs254vals(L)=SUNAShortRaw.Absorbance_2542(1,L)
        Brvals(L)=SUNAShortRaw.Bromide2(1,L)
        Lvals(L)=SUNAShortRaw.LightAverage2(1,L)
      Next L
      ' perform some QA/QC on them
      ' perform a basic QA/QC to remove any outliers
      ' assuming that a valid NO3 value is accompanied by good values of other parameters
      K=0
      SUMNO3=0
      SumNO32=0
      SumAbs254=0
      SumAbs350=0
      SumBr=0
      SumL=0
      For M=1 To 20
        temp=NO3Vals(M)
        ' The range of 0 to 10 mgL is considered valid
        If ( temp < 10) Then'?????????????????
          If(temp > 0) Then
            SUMNO3=SUMNO3+temp

            ' this is a zone for valid numbers only , so pick them up
            SumNO32=SumNO32+NO3Vals2(M)
            SumAbs254=SumAbs254+Abs254vals(M)
            SumAbs350=SumAbs350+Abs350vals(M)
            SumBr=SumBr+Brvals(M)
            SumL=SumL+Lvals(M)
            K=K+1
          EndIf
        EndIf
      Next M
      ' if for some reason there are no valid CO2 values
      If ( K=0 )
      Nitrate_mgL = NaN
      Nitrate_um = NaN
      Absorbance_254 = NaN
      Absorbance_350 = NaN
      Bromide =NaN
      LightAverage = NaN
    Else
      Nitrate_mgL = SUMNO3/K
      Nitrate_um = SumNO32/K
      Absorbance_254 = SumAbs254/K
      Absorbance_350 = SumAbs350/K
      Bromide =SumBr/K
      LightAverage = SumL/K
    EndIf
    CallTable (WQual)
	CallTable AqCO2Full
	CallTable AqCO2Short
  EndIf
NextScan

'*************************** Slow Scan for  Communications ****************************
' This section allows the program to control the Global Modem data interface
' SlowSequence allows us to do more lengthy processes at a lower priority than used for sensor sampling
SlowSequence
Scan(10,Sec,0,0)
  '************* Assemble Data message for telemetry
  ScanState = "SlowScan"
'    If IfTime(1,60,Min) Then
'      sendReport = 1
'    EndIf
  If SendReport > 0 Then
    'Only build the report once
    If NOT reportBuilt  Then
      'Get the data report from thetable
      GetRecord(TableData,Wqual,1)
      dataDate = INT(Wqual.Timestamp(2,1))/60
      If dataDate < 0 Then
        dataDate = INT(Public.TimeStamp(2,1))/60
      EndIf
      values2send = tablewidth
      For i = 1 To values2send
        Values(i) = TableData(i)
      Next
      sendLoop = 0
      tries = 0
      reportBuilt = True
      rptAttempts += 1
      commState = "Msg Init"
    EndIf'reportBuilt
    'Send values2send values via globaModem.
    sendvalues(dataDate, values2send)
    If(msgSent >= 1) Then
      sendReport = 0
    Else
      sendloop = sendloop +1
      If sendloop > 9 Then
        sendReport = 0
        commState = "Msg Failed"
        rptFailures += 1
      EndIf
    EndIf '(reportBuilt)
  EndIf  '(sendReport)
NextScan

EndProg


